# -*- coding: utf-8 -*-
"""car_liecence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QAe6uWQKIShBVNdkI10MePdSvZHwKWz4
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""This code uses the google.colab library to connect to Google Drive. Using this code, you can access your Google Drive and manage the files and folders in it.


---


"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install ultralytics

"""⏸
`%%capture`: This command tells the code to save and not display the output of pip commands. This is used to avoid displaying more text in the output.

`!pip install ultralytics`: This command is used to install ultralytics package using pip software. The ultralytics package is a library for image detection and analysis. By installing this package, you will be able to use its functions and features in your project.


---

#Prepare Dataset
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install roboflow

"""⏸`!pip install roboflow`:By installing it, you can access the functions that you can work with roboflow. roboflow is an environment for preparing image datasets.


---


"""

ROOT ='/content/gdrive/MyDrive/CarLiecence'

"""⏸Defines a path as the value of the ROOT variable. This is the path of the project folder


---


"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {ROOT}

"""⏸Changes the current directory to the path stored in the ROOT variable.


---


"""

!pwd

"""⏸It shows the current directory


---


"""

API_KEY = "" #Secret

from roboflow import Roboflow
rf = Roboflow(api_key=API_KEY)
project = rf.workspace("mahsa-sanaei-bq3ef").project("anpr_ir-eaypt")
dataset = project.version(1).download("yolov8")

"""⏸``roboflow'' library is used to access the project and its data. In this code, first an instance of the ``Roboflow'' class is created, using your API key (`API_KEY'), it accesses the desired version and downloads the data.

The description of this section is as follows:

- `from roboflow import Roboflow': This command tells the code to load the ``Roboflow'' class from the ``roboflow'' library so that it can use it to access the project and its data.

- `rf = Roboflow(api_key=API_KEY)`: This line of code creates an instance of the `Roboflow` class using the API key (`API_KEY`). You must set the appropriate value for `API_KEY` in order to successfully access the API.

- `project = rf.workspace("mahsa-sanaei-bq3ef").project("anpr_ir-eaypt")`: This command tells the code to create a project named "anpr_ir-eaypt" in the workspace named access "mahsa-sanaei-bq3ef" and store it in the `project` variable.

- `dataset = project.version(1).download("yolov8")`: This command downloads the data of version 1 of the project named "yolov8" and stores it in the `dataset` variable.



---

#Model
"""

!yolo task=detect mode=train model=yolov8s.pt data=/content/gdrive/MyDrive/CarLiecence/ANPR_ir-1/data.yaml epochs=88 imgsz=640

"""⏸ This command executes a YOLO task called "detect" with specified settings. The description of this command is as follows:

- `!yolo task=detect`: This part of the command tells the code to execute the "detect" operation. The "detect" function is used to detect objects in images.

- `mode=train`: This part of the command specifies that we are in training mode, which means that the YOLO algorithm will be applied to the data for learning and training.

- `model=yolov8s.pt`: This section specifies to use the YOLO model of type "yolov8s" with the extension ".pt". The file of this model has already been trained and we are going to transfer the training and train the data on it.

- `data=/content/gdrive/MyDrive/CarLiecence/ANPR_ir-1/data.yaml`: This section specifies the path to the data YAML file. This YAML file contains information such as training and test data paths.

- `epochs=60`: This section specifies the number of epochs for training. The number of epochs indicates the number of times the YOLO algorithm will be trained on the data.

- `imgsz=640`: This section determines the size of the input images for training. Here, input images for YOLO8 should be set to 640x640 pixels.


---


"""

!yolo task=detect mode=val model=/content/gdrive/MyDrive/CarLiecence/runs/detect/train2/weights/best.pt  data=/content/gdrive/MyDrive/CarLiecence/ANPR_ir-1/data.yaml

"""⏸ - `mode=val`: This section specifies that we are in the evaluation mode (validation), which means that the YOLO algorithm will be applied to the evaluation data and the performance of the model will be evaluated.

- `model=/content/gdrive/MyDrive/CarLiecence/runs/detect/train2/weights/best.pt`: This section specifies the YOLO model file path. The model file with the extension ".pt" is located in the specified path. When we train the model, it produces two files. One is the latest weights and the other is the best weights. We can choose any one as desired.


This model file is actually saved after our training in the path specified at the end of the process.


---


"""

!yolo task=detect mode=predict model=/content/gdrive/MyDrive/CarLiecence/runs/detect/train2/weights/best.pt  source=/content/gdrive/MyDrive/CarLiecence/ANPR_ir-1/test/images

"""⏸ A series of images are given for testing to make predictions


---

#Get Image
"""

!yolo predict model=/content/gdrive/MyDrive/CarLiecence/runs/detect/train2/weights/best.pt source='/content/gdrive/MyDrive/CarLiecenceProject/Source/test_video.mp4'

import cv2
import matplotlib.pyplot as plt

image_path = '/content/gdrive/MyDrive/CarLiecence/runs/detect/predict2/images.jpeg'


image = cv2.imread(image_path)


image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.imshow(image)
plt.axis('off')
plt.show()

!yolo predict model=/content/gdrive/MyDrive/CarLiecence/runs/detect/train2/weights/best.pt source='/content/m2.jpeg'

import cv2
import matplotlib.pyplot as plt

image_path = '/content/gdrive/MyDrive/CarLiecence/runs/detect/predict4/m2.jpeg'


image = cv2.imread(image_path)


image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.imshow(image)
plt.axis('off')
plt.show()

"""#Repeat"""

!yolo task=detect mode=train model=yolov8m.pt data=/content/gdrive/MyDrive/CarLiecence/ANPR_ir-1/data.yaml epochs=100 imgsz=640

!yolo predict model=/content/gdrive/MyDrive/CarLiecence/runs/detect/train3/weights/best.pt source='/content/images.jpeg'

import cv2
import matplotlib.pyplot as plt

image_path = '/content/gdrive/MyDrive/CarLiecence/runs/detect/predict3/images.jpeg'


image = cv2.imread(image_path)


image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.imshow(image)
plt.axis('off')
plt.show()